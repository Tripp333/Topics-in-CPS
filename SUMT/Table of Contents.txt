# Topics in Optimization: 
# Computational Project 2: The SUMT Algorithm
# Tripp Lawrence and Luke Lewis
# 04/10/2023

In the code file, the functions are in the following order:


    function_eval(function, variables, point)

    initial_mover(constraint, variables, initial, epsilon, t_var)

    initialization(constraints, variables, epsilon)

    gradient_gen(variables, function)

    constraint_check(constraints, solution, variables)

    gradient_eval(variables, gradient, current, epsilon)

    stepping_function_gen(current, num_grad, function, variables)

    mover_function(variables, num_grad, current, stepping_function, constraints)

    gradient_search(variables, function, current, epsilon, constraints, r_value)

    constraint_gen(variables)

    p_function_gen(constraints, objective, r_value)

    distance_traveled(variables, current, next)

    SUMT(variables, epsilon, current, constraints, objective)

The program has three main parts:
    Initialization of initial solution
    The Gradient Method to find the optimal solution for that function/iteration
    The SUMT Algorithm which updates the function by changing the r_value

In python, you have to go to the bottom of the file to see where the program actually runs.
The program starts where the line "if __name__ == '__main__':" is.

In python, in order to represent hitting the enter key, you have to do "\n". So, that will come up in a couple of the input files, and I just wanted to let you know.



The various solution files are to show some of the various functionality of this program.
    input1.txt/output1.txt  - This contains a basic objective function that was a class example.
    input2.txt/output2.txt - This is the same example as the function above, but the epsilon has been changed to a smaller value (to show the increase in accuracy).
    input3.txt/output3.txt - This is a 3-dimensional objective function with three constraint equations.

